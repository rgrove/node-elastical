//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.Method = { 
'GET' : 0
,'PUT' : 1
,'POST' : 2
,'DELETE' : 3
,'HEAD' : 4
,'OPTIONS' : 5
}
ttypes.Status = { 
'CONT' : 100
,'SWITCHING_PROTOCOLS' : 101
,'OK' : 200
,'CREATED' : 201
,'ACCEPTED' : 202
,'NON_AUTHORITATIVE_INFORMATION' : 203
,'NO_CONTENT' : 204
,'RESET_CONTENT' : 205
,'PARTIAL_CONTENT' : 206
,'MULTI_STATUS' : 207
,'MULTIPLE_CHOICES' : 300
,'MOVED_PERMANENTLY' : 301
,'FOUND' : 302
,'SEE_OTHER' : 303
,'NOT_MODIFIED' : 304
,'USE_PROXY' : 305
,'TEMPORARY_REDIRECT' : 307
,'BAD_REQUEST' : 400
,'UNAUTHORIZED' : 401
,'PAYMENT_REQUIRED' : 402
,'FORBIDDEN' : 403
,'NOT_FOUND' : 404
,'METHOD_NOT_ALLOWED' : 405
,'NOT_ACCEPTABLE' : 406
,'PROXY_AUTHENTICATION' : 407
,'REQUEST_TIMEOUT' : 408
,'CONFLICT' : 409
,'GONE' : 410
,'LENGTH_REQUIRED' : 411
,'PRECONDITION_FAILED' : 412
,'REQUEST_ENTITY_TOO_LARGE' : 413
,'REQUEST_URI_TOO_LONG' : 414
,'UNSUPPORTED_MEDIA_TYPE' : 415
,'REQUESTED_RANGE_NOT_SATISFIED' : 416
,'EXPECTATION_FAILED' : 417
,'UNPROCESSABLE_ENTITY' : 422
,'LOCKED' : 423
,'FAILED_DEPENDENCY' : 424
,'INTERNAL_SERVER_ERROR' : 500
,'NOT_IMPLEMENTED' : 501
,'BAD_GATEWAY' : 502
,'SERVICE_UNAVAILABLE' : 503
,'GATEWAY_TIMEOUT' : 504
,'INSUFFICIENT_STORAGE' : 506
}
var RestRequest = module.exports.RestRequest = function(args){
  this.method = null
  this.uri = null
  this.parameters = null
  this.headers = null
  this.body = null
if( args != null ){  if (null != args.method)
  this.method = args.method
  if (null != args.uri)
  this.uri = args.uri
  if (null != args.parameters)
  this.parameters = args.parameters
  if (null != args.headers)
  this.headers = args.headers
  if (null != args.body)
  this.body = args.body
}}
RestRequest.prototype = {}
RestRequest.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size0 = 0
          var rtmp3
          this.parameters = {}
          var _ktype1 = 0
          var _vtype2 = 0
          rtmp3 = input.readMapBegin()
          _ktype1= rtmp3.ktype
          _vtype2= rtmp3.vtype
          _size0= rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            key5 = null
            val6 = null
            key5 = input.readString()
            val6 = input.readString()
            this.parameters[key5] = val6
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.MAP) {
        {
          var _size7 = 0
          var rtmp3
          this.headers = {}
          var _ktype8 = 0
          var _vtype9 = 0
          rtmp3 = input.readMapBegin()
          _ktype8= rtmp3.ktype
          _vtype9= rtmp3.vtype
          _size7= rtmp3.size
          for (var _i11 = 0; _i11 < _size7; ++_i11)
          {
            key12 = null
            val13 = null
            key12 = input.readString()
            val13 = input.readString()
            this.headers[key12] = val13
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

RestRequest.prototype.write = function(output){ 
  output.writeStructBegin('RestRequest')
  if (null != this.method) {
    output.writeFieldBegin('method', Thrift.Type.I32, 1)
    output.writeI32(this.method)
    output.writeFieldEnd()
  }
  if (null != this.uri) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2)
    output.writeString(this.uri)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter14 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter14))
          {
            var viter15 = this.parameters[kiter14]
            output.writeString(kiter14)
            output.writeString(viter15)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.headers) {
    output.writeFieldBegin('headers', Thrift.Type.MAP, 4)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.headers))
      {
        for(var kiter16 in this.headers)        {
          if (this.headers.hasOwnProperty(kiter16))
          {
            var viter17 = this.headers[kiter16]
            output.writeString(kiter16)
            output.writeString(viter17)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.body) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 5)
    output.writeString(this.body)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var RestResponse = module.exports.RestResponse = function(args){
  this.status = null
  this.headers = null
  this.body = null
if( args != null ){  if (null != args.status)
  this.status = args.status
  if (null != args.headers)
  this.headers = args.headers
  if (null != args.body)
  this.body = args.body
}}
RestResponse.prototype = {}
RestResponse.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.MAP) {
        {
          var _size18 = 0
          var rtmp3
          this.headers = {}
          var _ktype19 = 0
          var _vtype20 = 0
          rtmp3 = input.readMapBegin()
          _ktype19= rtmp3.ktype
          _vtype20= rtmp3.vtype
          _size18= rtmp3.size
          for (var _i22 = 0; _i22 < _size18; ++_i22)
          {
            key23 = null
            val24 = null
            key23 = input.readString()
            val24 = input.readString()
            this.headers[key23] = val24
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

RestResponse.prototype.write = function(output){ 
  output.writeStructBegin('RestResponse')
  if (null != this.status) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1)
    output.writeI32(this.status)
    output.writeFieldEnd()
  }
  if (null != this.headers) {
    output.writeFieldBegin('headers', Thrift.Type.MAP, 2)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.headers))
      {
        for(var kiter25 in this.headers)        {
          if (this.headers.hasOwnProperty(kiter25))
          {
            var viter26 = this.headers[kiter25]
            output.writeString(kiter25)
            output.writeString(viter26)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.body) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3)
    output.writeString(this.body)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

